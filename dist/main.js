(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Alatsi&family=JetBrains+Mono:wght@150&family=Lato:wght@100;300;400&family=Lobster&family=Montserrat+Alternates:wght@300;400&family=Montserrat:wght@200;300;400&family=PT+Mono&family=Press+Start+2P&display=swap);"]),i.push([n.id,"*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --accent-1: hsl(147, 47%, 42%);\n  --accent-2: hsl(234, 24%, 8%);\n  --accent-3: hsl(245, 17%, 15%);\n  --accent-4: hsl(60, 100%, 66%);\n}\n\nbody {\n  min-height: 100vh;\n  /* font-family: 'Alatsi', sans-serif;\n  font-family: 'JetBrains Mono', monospace;\n  font-family: 'Lato', sans-serif;\n  font-family: 'Lobster', cursive;\n  font-family: 'Montserrat', sans-serif;\n  font-family: 'Montserrat Alternates', sans-serif;\n  font-family: 'Press Start 2P', cursive;\n  font-family: 'PT Mono', monospace; */\n}\n\n.container {\n  height: 100vh;\n  display: grid;\n  place-items: center;\n  background-color: var(--accent-2);\n}\n\n.form {\n  height: 590px;\n  width: 320px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 25px 10px;\n  border-radius: 8px;\n  background-color: var(--accent-3);\n}\n\nh1 {\n  margin-bottom: auto;\n  font-family: 'Lobster', cursive;\n  letter-spacing: 4px;\n  font-size: 2.55rem;\n  color: var(--accent-4);\n}\n\n.control {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 7px;\n  margin-bottom: 2px;\n}\n\nlabel, span {\n  font-family: 'Lato', sans-serif\n}\n\nlabel {\n  height: 20px;\n  font-weight: 300;\n  color: white;\n}\n\nspan[aria-label=\"required\"] {\n  font-weight: bold;\n  color: white;\n}\n\nspan.error-msg {\n  height: 15px;\n  display: block;\n  font-size: .85rem;\n  color: rgb(255, 54, 54);\n}\n\ninput {\n  height: calc(1rem + 14px);\n  font-family: 'JetBrains Mono', monospace;\n  text-indent: 5px;\n  outline: none;\n  border: none;\n  border-radius: 4px;\n}\n\n.register-btn {\n  padding: 10px 15px;\n  margin-top: auto;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n  background-color: var(--accent-1);\n  color: white;\n  font-size: 1rem;\n  font-family: 'Montserrat', sans-serif;\n  cursor: pointer;\n  transition: .65s;\n}\n\n.register-btn:hover {\n  transform: translateY(-4px);\n}\n\n.error-border {\n  border: 2px solid rgb(255, 54, 54);\n}\n\n.correct-border {\n  border: 2px solid rgb(58, 226, 58);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;;;EAGE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,8BAA8B;EAC9B,6BAA6B;EAC7B,8BAA8B;EAC9B,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;EACjB;;;;;;;sCAOoC;AACtC;;AAEA;EACE,aAAa;EACb,aAAa;EACb,mBAAmB;EACnB,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;EAClB,iCAAiC;AACnC;;AAEA;EACE,mBAAmB;EACnB,+BAA+B;EAC/B,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,QAAQ;EACR,kBAAkB;AACpB;;AAEA;EACE;AACF;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,cAAc;EACd,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,wCAAwC;EACxC,gBAAgB;EAChB,aAAa;EACb,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,aAAa;EACb,YAAY;EACZ,kBAAkB;EAClB,iCAAiC;EACjC,YAAY;EACZ,eAAe;EACf,qCAAqC;EACrC,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,kCAAkC;AACpC",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Alatsi&family=JetBrains+Mono:wght@150&family=Lato:wght@100;300;400&family=Lobster&family=Montserrat+Alternates:wght@300;400&family=Montserrat:wght@200;300;400&family=PT+Mono&family=Press+Start+2P&display=swap');\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --accent-1: hsl(147, 47%, 42%);\n  --accent-2: hsl(234, 24%, 8%);\n  --accent-3: hsl(245, 17%, 15%);\n  --accent-4: hsl(60, 100%, 66%);\n}\n\nbody {\n  min-height: 100vh;\n  /* font-family: 'Alatsi', sans-serif;\n  font-family: 'JetBrains Mono', monospace;\n  font-family: 'Lato', sans-serif;\n  font-family: 'Lobster', cursive;\n  font-family: 'Montserrat', sans-serif;\n  font-family: 'Montserrat Alternates', sans-serif;\n  font-family: 'Press Start 2P', cursive;\n  font-family: 'PT Mono', monospace; */\n}\n\n.container {\n  height: 100vh;\n  display: grid;\n  place-items: center;\n  background-color: var(--accent-2);\n}\n\n.form {\n  height: 590px;\n  width: 320px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 25px 10px;\n  border-radius: 8px;\n  background-color: var(--accent-3);\n}\n\nh1 {\n  margin-bottom: auto;\n  font-family: 'Lobster', cursive;\n  letter-spacing: 4px;\n  font-size: 2.55rem;\n  color: var(--accent-4);\n}\n\n.control {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 7px;\n  margin-bottom: 2px;\n}\n\nlabel, span {\n  font-family: 'Lato', sans-serif\n}\n\nlabel {\n  height: 20px;\n  font-weight: 300;\n  color: white;\n}\n\nspan[aria-label=\"required\"] {\n  font-weight: bold;\n  color: white;\n}\n\nspan.error-msg {\n  height: 15px;\n  display: block;\n  font-size: .85rem;\n  color: rgb(255, 54, 54);\n}\n\ninput {\n  height: calc(1rem + 14px);\n  font-family: 'JetBrains Mono', monospace;\n  text-indent: 5px;\n  outline: none;\n  border: none;\n  border-radius: 4px;\n}\n\n.register-btn {\n  padding: 10px 15px;\n  margin-top: auto;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n  background-color: var(--accent-1);\n  color: white;\n  font-size: 1rem;\n  font-family: 'Montserrat', sans-serif;\n  cursor: pointer;\n  transition: .65s;\n}\n\n.register-btn:hover {\n  transform: translateY(-4px);\n}\n\n.error-border {\n  border: 2px solid rgb(255, 54, 54);\n}\n\n.correct-border {\n  border: 2px solid rgb(58, 226, 58);\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var u=t(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=r(n,o),c=0;c<a.length;c++){var A=t(a[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),l=t.n(s),c=t(216),A=t.n(c),d=t(589),u=t.n(d),f=t(426),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=A(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;const m=(()=>{const n=document.querySelector("#email"),e=document.querySelector("#country"),t=document.querySelector("#z-code"),r=document.querySelector("#password"),o=document.querySelector("#password-confirm"),a=n=>{n.classList.remove("correct-border"),n.classList.add("error-border")},i=n=>{n.classList.remove("error-border"),n.classList.add("correct-border")};return{handleEmailValidity:()=>{const e=n.nextElementSibling;n.validity.valueMissing?(e.innerText="Please fill out this field",a(n)):n.validity.valid?(e.innerText="",i(n)):(e.innerText="Please enter a valid email",a(n))},handleCountryValidity:()=>{const n=e.nextElementSibling;e.validity.valueMissing?(n.innerText="Please fill out this field",a(e)):e.value.match(/\s/g)?(n.innerText="No spaces allowed",a(e)):e.value.length<2?(n.innerText="Country must be 2 characters long",a(e)):(n.innerText="",i(e))},handleZipCodeValidity:()=>{const n=t.nextElementSibling;t.validity.valueMissing?(n.innerText="Please fill out this field",a(t)):t.validity.rangeUnderflow?(n.innerText="Zip code must be 5 numbers long",a(t)):t.validity.rangeOverflow?(n.innerText="Zip code must not exceed 5 numbers",a(t)):(n.innerText="",i(t))},handlePasswordValidity:()=>{const n=r.nextElementSibling;r.value.match(/\s/g)?(n.innerText="No spaces allowed",a(r)):r.validity.valueMissing?(n.innerText="Please fill out this field",a(r)):r.value.match(/[a-z]/g)?r.value.match(/[A-Z]/g)?r.value.match(/[0-9]/g)?r.value.length<8?(n.innerText="Must be at least 8 characters long",a(r)):(n.innerText="",i(r)):(n.innerText="Must contain at least one number",a(r)):(n.innerText="Must contain at least one uppercase letter",a(r)):(n.innerText="Must contain at least one lowercase letter",a(r))},handlePasswordConfirmValidity:()=>{const n=o.nextElementSibling;o.setCustomValidity(""),o.validity.valueMissing||o.value!==r.value?(n.innerText="Passwords do not match",o.setCustomValidity("Passwords do not match"),a(o)):(n.innerText="",i(o))}}})();(()=>{const n=document.querySelector(".form"),e=document.querySelector("#email"),t=document.querySelector("#country"),r=document.querySelector("#z-code"),o=document.querySelector("#password"),a=document.querySelector("#password-confirm");n.addEventListener("submit",(n=>{n.preventDefault(),m.handleEmailValidity(),m.handleCountryValidity(),m.handleZipCodeValidity(),m.handlePasswordValidity(),m.handlePasswordConfirmValidity();const i=[e,t,r,o,a].every((n=>n.checkValidity()));i?alert("Submitted!"):alert("Invalid fields found!")})),e.addEventListener("input",m.handleEmailValidity),t.addEventListener("input",m.handleCountryValidity),r.addEventListener("input",m.handleZipCodeValidity),o.addEventListener("input",m.handlePasswordValidity),a.addEventListener("input",m.handlePasswordConfirmValidity)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,